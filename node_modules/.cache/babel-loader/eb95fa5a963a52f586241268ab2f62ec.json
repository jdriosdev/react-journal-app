{"ast":null,"code":"var _jsxFileName = \"/home/juan/dev/portfolio/react-2/src/components/notes/NoteScreen.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { NotesAppBar } from './NotesAppBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from '../../hooks/useForm';\nimport { activeNote, startDeleting } from '../../actions/notes';\nexport const NoteScreen = () => {\n  const dispatch = useDispatch();\n  const {\n    active: note\n  } = useSelector(state => state.notes);\n  const [formValues, handleInputChange, reset] = useForm(note);\n  const {\n    body,\n    title,\n    id\n  } = formValues;\n  const activeId = useRef(note.id);\n  useEffect(() => {\n    if (note.id !== activeId.current) {\n      reset(note);\n      activeId.current = note.id;\n    }\n  }, [note, reset]);\n  useEffect(() => {\n    dispatch(activeNote(formValues.id, { ...formValues\n    }));\n  }, [formValues, dispatch]);\n\n  const handleDelete = () => {\n    dispatch(startDeleting(id));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes__main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NotesAppBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Some awesome title\",\n    autoComplete: \"off\",\n    className: \"input notes__title-input\",\n    name: \"title\",\n    value: title,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"What happened today?\",\n    className: \"notes__textarea\",\n    name: \"body\",\n    value: body,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), note.url && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes__image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: note.url,\n    alt: note.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger\",\n    onClick: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Delete\"));\n};","map":{"version":3,"sources":["/home/juan/dev/portfolio/react-2/src/components/notes/NoteScreen.js"],"names":["React","useEffect","useRef","NotesAppBar","useDispatch","useSelector","useForm","activeNote","startDeleting","NoteScreen","dispatch","active","note","state","notes","formValues","handleInputChange","reset","body","title","id","activeId","current","handleDelete","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,qBAA1C;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAE9B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAM;AAACO,IAAAA,MAAM,EAACC;AAAR,MAAgBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAjC;AACA,QAAM,CAACC,UAAD,EAAaC,iBAAb,EAAgCC,KAAhC,IAAyCX,OAAO,CAACM,IAAD,CAAtD;AACA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAsBL,UAA5B;AAEA,QAAMM,QAAQ,GAAGnB,MAAM,CAACU,IAAI,CAACQ,EAAN,CAAvB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAIW,IAAI,CAACQ,EAAL,KAAYC,QAAQ,CAACC,OAAzB,EAAkC;AAChCL,MAAAA,KAAK,CAACL,IAAD,CAAL;AACAS,MAAAA,QAAQ,CAACC,OAAT,GAAmBV,IAAI,CAACQ,EAAxB;AACD;AAEF,GAPQ,EAON,CAACR,IAAD,EAAOK,KAAP,CAPM,CAAT;AASAhB,EAAAA,SAAS,CAAC,MAAK;AACbS,IAAAA,QAAQ,CAACH,UAAU,CAAEQ,UAAU,CAACK,EAAb,EAAiB,EAAC,GAAGL;AAAJ,KAAjB,CAAX,CAAR;AACD,GAFQ,EAEN,CAACA,UAAD,EAAaL,QAAb,CAFM,CAAT;;AAIA,QAAMa,YAAY,GAAG,MAAM;AACzBb,IAAAA,QAAQ,CAACF,aAAa,CAACY,EAAD,CAAd,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,YAAY,EAAC,KAHf;AAIE,IAAA,SAAS,EAAC,0BAJZ;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,KAAK,EAAED,KANT;AAOE,IAAA,QAAQ,EAAEH,iBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE;AACE,IAAA,WAAW,EAAC,sBADd;AAEE,IAAA,SAAS,EAAC,iBAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAEE,IAJT;AAKE,IAAA,QAAQ,EAAEF,iBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAsBOJ,IAAI,CAACY,GAAN,iBACA;AACF,IAAA,SAAS,EAAC,cADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AACE,IAAA,GAAG,EAAEZ,IAAI,CAACY,GADZ;AAEE,IAAA,GAAG,EAAEZ,IAAI,CAACO,KAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAvBN,CAHF,eAuCE;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,OAAO,EAAEI,YAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCF,CADF;AAgDD,CA3EM","sourcesContent":["import React, { useEffect, useRef }  from 'react'\nimport { NotesAppBar } from './NotesAppBar'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from '../../hooks/useForm';\nimport { activeNote, startDeleting } from '../../actions/notes';\n\n\n\nexport const NoteScreen = () => {\n\n  const dispatch = useDispatch()\n\n  const {active:note} = useSelector(state => state.notes)\n  const [formValues, handleInputChange, reset] = useForm(note);\n  const { body, title, id } = formValues;\n\n  const activeId = useRef(note.id)\n\n  useEffect(() => {\n    \n    if (note.id !== activeId.current) {\n      reset(note);\n      activeId.current = note.id\n    }\n\n  }, [note, reset])\n\n  useEffect(()=> {\n    dispatch(activeNote( formValues.id, {...formValues} ))\n  }, [formValues, dispatch])\n\n  const handleDelete = () => {\n    dispatch(startDeleting(id));\n  }\n\n  return (\n    <div className='notes__main-content'>\n      <NotesAppBar />\n\n      <div className='notes__content'>\n        <input \n          type='text'\n          placeholder='Some awesome title'\n          autoComplete='off'\n          className='input notes__title-input'\n          name='title'\n          value={title}\n          onChange={handleInputChange}\n        />\n\n        <textarea\n          placeholder='What happened today?'\n          className='notes__textarea'\n          name='body'\n          value={body}\n          onChange={handleInputChange}\n        >\n        </textarea>\n\n        \n          {\n            (note.url) &&\n            <div \n          className='notes__image'\n          >\n              <img \n                src={note.url}\n                alt={note.title}\n              />\n            </div>\n          }\n\n\n\n      </div>\n      <button\n        className='btn btn-danger'\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}