{"ast":null,"code":"var _jsxFileName = \"/home/juan/dev/portfolio/react-2/src/routers/AppRouter.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\nimport { JournalScreen } from '../components/journal/JournalScreen';\nimport { AuthRouter } from './AuthRouter';\nimport { firebase } from '../firebase/firebase-config';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../actions/auth';\nimport { PublicRoute } from './PublicRoute';\nimport { PrivateRoute } from './PrivateRoute';\nimport { startLoadingNotes } from '../actions/notes';\nexport const AppRouter = () => {\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true);\n        dispatch(startLoadingNotes(user.uid));\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn]);\n\n  if (checking) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PublicRoute, {\n    path: \"/auth\",\n    component: AuthRouter,\n    isAuth: isLoggedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    path: \"/\",\n    component: JournalScreen,\n    isAuth: isLoggedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/auth/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }))));\n};","map":{"version":3,"sources":["/home/juan/dev/portfolio/react-2/src/routers/AppRouter.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Redirect","JournalScreen","AuthRouter","firebase","useDispatch","login","PublicRoute","PrivateRoute","startLoadingNotes","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","auth","onAuthStateChanged","user","uid","displayName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,QAHF,QAIO,kBAJP;AAKA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,6BAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE7B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA2BhB,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,QAAQ,CAACY,IAAT,GAAgBC,kBAAhB,CAAmC,MAAMC,IAAN,IAAe;AAChD,UAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEC,GAAV,EAAgB;AACdR,QAAAA,QAAQ,CAACL,KAAK,CAACY,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,WAAhB,CAAN,CAAR;AACAL,QAAAA,aAAa,CAAC,IAAD,CAAb;AAEAJ,QAAAA,QAAQ,CAACF,iBAAiB,CAACS,IAAI,CAACC,GAAN,CAAlB,CAAR;AAED,OAND,MAMO;AACLJ,QAAAA,aAAa,CAAG,KAAH,CAAb;AACD;;AAEDF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAZD;AAcD,GAhBQ,EAgBN,CAACF,QAAD,EAAWE,WAAX,EAAwBE,aAAxB,CAhBM,CAAT;;AAkBA,MAAIH,QAAJ,EAAc;AACZ,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD;;AAED,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,EAAET,UAHb;AAIE,IAAA,MAAM,EAAEW,UAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,YAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,GAFP;AAGE,IAAA,SAAS,EAAEZ,aAHb;AAIE,IAAA,MAAM,EAAEY,UAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF,CADF,CADJ;AAqBD,CApDM","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { JournalScreen } from '../components/journal/JournalScreen'\nimport { AuthRouter } from './AuthRouter'\nimport {firebase} from '../firebase/firebase-config';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../actions/auth';\nimport { PublicRoute } from './PublicRoute';\nimport { PrivateRoute } from './PrivateRoute';\nimport { startLoadingNotes } from '../actions/notes';\n\nexport const AppRouter = () => {\n\n  const dispatch = useDispatch();\n\n  const [checking, setChecking ] = useState(true)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    \n    firebase.auth().onAuthStateChanged(async(user) => {\n      if( user?.uid ) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true)\n\n        dispatch(startLoadingNotes(user.uid))\n\n      } else {\n        setIsLoggedIn ( false )\n      }\n\n      setChecking(false)\n    })\n\n  }, [dispatch, setChecking, setIsLoggedIn])\n\n  if (checking) {\n    return ( \n      <h1>Loading...</h1>\n    )\n  }\n\n  return (  \n      <Router>\n        <div>\n          <Switch>\n            <PublicRoute \n              \n              path='/auth'\n              component={AuthRouter}\n              isAuth={isLoggedIn}\n            />\n            <PrivateRoute\n              exact\n              path='/'\n              component={JournalScreen}\n              isAuth={isLoggedIn}\n            />\n            <Redirect to='/auth/login' />\n          </Switch>\n        </div>\n      </Router>        \n  )\n}\n"]},"metadata":{},"sourceType":"module"}